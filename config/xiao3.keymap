/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/led/led.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "tap-unless-interrupted";
    tapping-term-ms = <2000>;
};

&msc {
    acceleration-exponent = <0.3>;
    time-to-max-speed-ms = <500>;
};

&mwh {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <0.3>;
};

/ {
    behaviors {
        hold_tap_orig: hold_tap_orig {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP_ORIG";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LCTRL &kp C>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RCTRL &kp V>;
            label = "PASTE";
        };

        ctrl_click: ctrl_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RCTRL &mkp LCLK>;
            label = "CTRL_CLICK";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESC         &kp HOME  &kp END         &copy         &paste         &ctrl_click    &kp N6               &kp F10   &kp F11              &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS
&kp TAB         &kp Q     &kp W           &kp E         &kp R          &kp T          &kp Y                &kp U     &kp I                &kp O             &kp P              &kp BACKSLASH
&kp LEFT_SHIFT  &kp A     &kp S           &kp D         &kp F          &kp G          &kp H                &kp J     &kp K                &kp L             &kp UP_ARROW       &kp EQUAL
&kp SCROLLLOCK  &kp Z     &kp X           &kp C         &kp V          &kp B          &kp N                &kp M     &kp COMMA            &kp DOT           &kp DOWN           &kp RIGHT
                          &msc MOVE_DOWN  &msc MOVE_UP                                                               &kp LEFT_GUI         &kp LEFT
                                          &kp SPACE     &kp BACKSPACE  &mkp LCLK                                     &mt RCTRL ENTER
                                          &kp LCTRL     &lt 1 DEL      &mkp RCLK      &mt RIGHT_ALT SLASH  &kp SEMI  &mt RIGHT_SHIFT SQT
            >;
        };

        layer_1 {
            bindings = <
&kp GRAVE         &kp F1           &kp F2        &kp F3        &kp F4        &kp F5         &kp F6          &kp F7         &kp F8        &kp F9                &kp F12                &kp F11
&kp TILDE         &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT    &kp CARET       &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&kp LEFT_SHIFT    &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5         &kp NUMBER_6    &kp N7         &kp N8        &kp N9                &kp N0                 &trans
&kp LEFT_CONTROL  &trans           &trans        &trans        &kp F10       &kp F11        &trans          &none          &trans        &trans                &trans                 &bt BT_CLR_ALL
                                   &kp F10       &kp F11                                                                   &mkp LCLK     &trans
                                                 &kp HOME      &trans        &trans                                        &kp PG_UP
                                                 &kp END       &trans        &trans         &msc MOVE_DOWN  &trans         &kp PG_DN
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans                                    &trans  &trans
                        &trans  &trans  &trans                    &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
